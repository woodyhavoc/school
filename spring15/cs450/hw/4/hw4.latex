% Document class
\documentclass{article}

% Packages
\usepackage[english]{babel}
\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{fancyhdr}
\usepackage{graphicx}
\usepackage{latexsym}
\usepackage{mathtools}
\usepackage{multirow}

% Graphics Path
\graphicspath{ '{images/} }

% Page Styles
\pagestyle{fancy}

% Custom Commands
\newcommand{\ul}{\underline}

% Header Info
\fancyhf{}
\lhead{CS450}
\chead{HW4}
\rhead{Aaron Woods}
\rfoot{Page \thepage}

% Begin Document
\begin{document}

% Problem 4.2.2
\noindent \textbf{4.2.2}\\

% 4.2.2.a
\\\indent \textbf{a.}\\

\\\indent 
Leftmost Derivation:\\
\\\indent\indent
\textit{S} $\Rightarrow$ 0 \textit{S} 1
$\Rightarrow$ 0 0 \textit{S} 1 1
$\Rightarrow$ 0 0 0 1 1 1\\
\\\indent
Rightmost Derivation:\\
\\\indent\indent
Same as Leftmost Derivation.
\\
\\\indent
Parse Tree:\\
\\\indent\indent
\includegraphics[scale=0.5]{4_2_2_a1.png}\\

\\\indent
Ambiguity:\\
\\\indent\indent
This grammar is unambiguous.  Since the non-terminal is located
\\\indent\indent
in the middle of the production, there is only one location for recursion.\\

\\\indent
Description:\\
\\\indent\indent
This grammar generates the language which contains all strings of
\\\indent\indent
one or more 0s follow by the same number of 1s.\\

\newpage

% 4.2.2.b
\\\indent \textbf{b.}\\


\\\indent 
Leftmost Derivation:\\
\\\indent\indent
\textit{S}
$\Rightarrow$ + \textit{S S}
$\Rightarrow$ + * \textit{S S S}
$\Rightarrow$ + * \textit{a S S}
$\Rightarrow$ + * \textit{a a S}
$\Rightarrow$ + * \textit{a a a}\\
\\\indent
Rightmost Derivation:\\
\\\indent\indent
\textit{S}
$\Rightarrow$ + \textit{S S}
$\Rightarrow$ + \textit{S a}
$\Rightarrow$ + * \textit{S S a}
$\Rightarrow$ + * \textit{S a a}
$\Rightarrow$ + * \textit{a a a}\\
\\
\\\indent
Parse Tree:\\
\\\indent\indent
\includegraphics[scale=0.5]{4_2_2_b1.png}\\

\\\indent
Ambiguity:\\
\\\indent\indent
This grammar is unambiguous.  The arithmetic operations control the
\\\indent\indent
growth of the tree, and only allow for a single parse tree for a given
\\\indent\indent
string.\\

\\\indent
Description:\\
\\\indent\indent
This grammar generates the language which contains all strings
\\\indent\indent
which use prefix notation for addition and multiplication on two
\\\indent\indent
or more values, represented by \textit{a}.\\

\newpage

% 4.2.2.c
\\\indent \textbf{c.}\\

\\\indent
Leftmost Derivation:\\

\\\indent\indent
\begin{tabular}{c  c  l}
\textit{S} 	&	$\Rightarrow$	&	\textit{S} ( \textit{S} ) \textit{S}\\
			&	$\Rightarrow$	&	( \textit{S} ) \textit{S}\\
			&	$\Rightarrow$	&	( \textit{S} ( \textit{S} ) \textit{S} ) \textit{S}\\
			&	$\Rightarrow$	&	( \textit{S} ( \textit{S} ) \textit{S} ( \textit{S} ) \textit{S} ) \textit{S}\\
			&	$\Rightarrow$	&	( ( \textit{S} ) \textit{S} ( \textit{S} ) \textit{S} ) \textit{S}\\
			&	$\Rightarrow$	&	( ( ) \textit{S} ( \textit{S} ) \textit{S} ) \textit{S}\\
			&	$\Rightarrow$	&	( ( ) ( \textit{S} ) \textit{S} ) \textit{S}\\
			&	$\Rightarrow$	&	( ( ) ( ) \textit{S} ) \textit{S}\\
			&	$\Rightarrow$	&	( ( ) ( ) ) \textit{S}\\
			&	$\Rightarrow$	&	( ( ) ( ) )\\
\end{tabular}\\

\\\indent
Rightmost Derivation:\\

\\\indent\indent
\begin{tabular}{c c l}
\textit{S}	&	$\Rightarrow$	&	\textit{S} ( \textit{S} ) \textit{S}\\
			&	$\Rightarrow$	&	\textit{S} ( \textit{S} )\\
			&	$\Rightarrow$	&	\textit{S} ( \textit{S} ( \textit{S} ) \textit{S} )\\
			&	$\Rightarrow$	&	\textit{S} ( \textit{S} ( \textit{S} ) \textit{S} ( \textit{S} ) \textit{S} )\\
			&	$\Rightarrow$	&	\textit{S} ( \textit{S} ( \textit{S} ) \textit{S} ( \textit{S} ) )\\
			&	$\Rightarrow$	&	\textit{S} ( \textit{S} ( \textit{S} ) \textit{S} ( ) )\\
			&	$\Rightarrow$	&	\textit{S} ( \textit{S} ( \textit{S} ) ( ) )\\
			&	$\Rightarrow$	&	\textit{S} ( \textit{S} ( ) ( ) )\\
			&	$\Rightarrow$	&	\textit{S} ( ( ) ( ) )\\
			&	$\Rightarrow$	&	( ( ) ( ) )\\


\end{tabular}\\

\\\indent\\
Parse Tree:\\
\\\indent\indent
\includegraphics[scale=0.4]{4_2_2_c1.png}\\

\\\indent
Ambiguity:\\
\\\indent\indent
This grammar is ambiguous, as can be seen by this alternate 
\\\indent\indent
leftmost derivation:\\

\\\indent\indent
\begin{tabular}{c  c  l}
\textit{S} 	&	$\Rightarrow$	&	\textit{S} ( \textit{S} ) \textit{S}\\
			&	$\Rightarrow$	&	( \textit{S} ) \textit{S}\\
			&	$\Rightarrow$	&	( \textit{S} ( \textit{S} ) \textit{S} ) \textit{S}\\
			&	$\Rightarrow$	&	( ( \textit{S} ) \textit{S} ) \textit{S}\\
			&	$\Rightarrow$	&	( ( ) \textit{S} ) \textit{S}\\
			&	$\Rightarrow$	&	( ( ) \textit{S} ( \textit{S} ) \textit{S} ) \textit{S}\\
			&	$\Rightarrow$	&	( ( ) ( \textit{S} ) \textit{S} ) \textit{S}\\
			&	$\Rightarrow$	&	( ( ) ( ) \textit{S} ) \textit{S}\\
			&	$\Rightarrow$	&	( ( ) ( ) ) \textit{S}\\
			&	$\Rightarrow$	&	( ( ) ( ) )\\
\end{tabular}\\

\\\indent
Description:\\

\\\indent\indent
This grammar generates the language which contains all strings
\\\indent\indent
of matching open and closed parentheses.

\newpage

% 4.2.2.d
\\\indent \textbf{d.}\\

\\\indent
Leftmost Derivation:\\

\\\indent\indent
\begin{tabular}{c c l}
\textit{S}	&	$\Rightarrow$	&	\textit{S S}\\
			&	$\Rightarrow$	&	\textit{S} * \textit{S}\\
			&	$\Rightarrow$	&	( \textit{S} ) * \textit{S}\\
			&	$\Rightarrow$	&	( \textit{S} + \textit{S} ) * \textit{S}\\
			&	$\Rightarrow$	&	( \textit{a} + \textit{S} ) * \textit{S}\\
			&	$\Rightarrow$	&	( \textit{a} + \textit{a} ) * \textit{S}\\
			&	$\Rightarrow$	&	( \textit{a} + \textit{a} ) * \textit{a}\\
\end{tabular}\\

\\\indent
Rightmost Derivation:\\

\\\indent\indent
\begin{tabular}{c c l}
\textit{S}	&	$\Rightarrow$	&	\textit{S S}\\
			&	$\Rightarrow$	&	\textit{S a}\\
			&	$\Rightarrow$	&	\textit{S} * \textit{a}\\
			&	$\Rightarrow$	&	( \textit{S} ) * \textit{a}\\
			&	$\Rightarrow$	&	( \textit{S} + \textit{S} ) * \textit{a}\\
			&	$\Rightarrow$	&	( \textit{S} + \textit{a} ) * \textit{a}\\
			&	$\Rightarrow$	&	( \textit{a} + \textit{a} ) * \textit{a}\\
\end{tabular}\\

\\\indent
Parse Tree:\\

\\\indent\indent
\includegraphics[scale=0.5]{4_2_2_d1.png}\\

\\\indent
Ambiguity:\\

\\\indent\indent
Based on the terminals that are associated with most of the
\\\indent\indent
productions, it appears that this grammar only allows a single
\\\indent\indent
parse tree to exist for any given string.  Therefore, it is
\\\indent\indent
unambiguous.\\

\\\indent
Description:\\

\\\indent\indent
This grammar generates the language which contains all strings
\\\indent\indent
of two values either added or multiplied, with or without 
\\\indent\indent
parentheses.

\newpage

% 4.2.2.e
\\\indent \textbf{e.}\\

\\\indent
Leftmost Derivation:\\

\\\indent
\begin{tabular}{c c l}
\textit{S}	&	$\Rightarrow$	&	( \textit{L} )\\
			&	$\Rightarrow$	&	( \textit{L} , \textit{S} )\\
			&	$\Rightarrow$	&	( \textit{L} , \textit{S} , \textit{S} )\\
			&	$\Rightarrow$	&	( \textit{S} , \textit{S} , \textit{S} )\\
			&	$\Rightarrow$	&	( ( \textit{L} ) , \textit{S} , \textit{S} )\\
			&	$\Rightarrow$	&	( ( \textit{L} , \textit{S} ) , \textit{S} , \textit{S} )\\
			&	$\Rightarrow$	&	( ( \textit{S} , \textit{S} ) , \textit{S} , \textit{S} )\\
			&	$\Rightarrow$	&	( ( \textit{a} , \textit{S} ) , \textit{S} , \textit{S} )\\
			&	$\Rightarrow$	&	( ( \textit{a} , \textit{a} ) , \textit{S} , \textit{S} )\\
			&	$\Rightarrow$	&	( ( \textit{a} , \textit{a} ) , \textit{a} , \textit{S} )\\
			&	$\Rightarrow$	&	( ( \textit{a} , \textit{a} ) , \textit{a} , \textit{a} )\\	
\end{tabular}\\

\\\indent
Rightmost Derivation:\\
\\\indent
\begin{tabular}{c c l}
\textit{S}	&	$\Rightarrow$	&	( \textit{L} )\\
			&	$\Rightarrow$	&	( \textit{L} , \textit{S} )\\
			&	$\Rightarrow$	&	( \textit{L} , ( \textit{L} ) )\\
			&	$\Rightarrow$	&	( \textit{L} , ( \textit{S} ) )\\
			&	$\Rightarrow$	&	( \textit{L} , ( \textit{a} ) )\\
			&	$\Rightarrow$	&	( \textit{L} , \textit{S} , ( \textit{a} ) )\\
			&	$\Rightarrow$	&	( \textit{L} , \textit{a} , ( \textit{a} ) )\\
			&	$\Rightarrow$	&	( \textit{S} , \textit{a} , ( \textit{a} ) )\\
			&	$\Rightarrow$	&	( ( \textit{L} ) , \textit{a} , ( \textit{a} ) )\\
			&	$\Rightarrow$	&	( ( \textit{L} , \textit{S} ) , \textit{a} , ( \textit{a} ) )\\
			&	$\Rightarrow$	&	( ( \textit{L} , \textit{a} ) , \textit{a} , ( \textit{a} ) )\\
			&	$\Rightarrow$	&	( ( \textit{S} , \textit{a} ) , \textit{a} , ( \textit{a} ) )\\
			&	$\Rightarrow$	&	( ( \textit{a} , \textit{a} ) , \textit{a} , ( \textit{a} ) )\\	
\end{tabular}\\
\\\indent
Parse Tree:\\
\includegraphics[scale=0.4]{4_2_2_e1.png}\\
\\\indent
Ambiguity:\\
\\\indent\indent
There does not appear to be any ambiguity in this grammar\\
\indent\indent
because there is only one derivation from a production that does\\
\indent\indent
not contain a terminal value.  The only other production is derived\\
\indent\indent
from a nonterminal other than itself.\\
\\\indent
Description:\\
\\\indent\indent
This grammar describes the language that generates a comma separated\\
\indent\indent
list of values, either inside or outside of parentheses.  This includes\\
\indent\indent
nested parentheses.\\
\newpage

% 4.2.2.f
\\\indent \textbf{f.}\\

\\\indent
Leftmost Derivation:\\

\begin{tabular}{c c l}
\textit{S}	&	$\Rightarrow$	&	\textit{a S b S}\\
			&	$\Rightarrow$	&	\textit{a a S b S b S}\\
			&	$\Rightarrow$	&	\textit{a a b S b S}\\
			&	$\Rightarrow$	&	\textit{a a b b S}\\
			&	$\Rightarrow$	&	\textit{a a b b a S b S}\\
			&	$\Rightarrow$	&	\textit{a a b b a b S}\\
			&	$\Rightarrow$	&	\textit{a a b b a b}\\
\end{tabular}\\

\\\indent
Rightmost Derivation:\\

\begin{tabular}{c c l}
\textit{S}	&	$\Rightarrow$	&	\textit{a S b S}\\
			&	$\Rightarrow$	&	\textit{a S b a S b S}\\
			&	$\Rightarrow$	&	\textit{a S b a S b}\\
			&	$\Rightarrow$	&	\textit{a S b a b}\\
			&	$\Rightarrow$	&	\textit{a a S b S b a b}\\
			&	$\Rightarrow$	&	\textit{a a S b b a b}\\
			&	$\Rightarrow$	&	\textit{a a b b a b}\\
\end{tabular}\\

\\\indent
Parse Tree:\\
\includegraphics[scale=0.5]{4_2_2_f1.png}\\
\\\indent
Ambiguity:\\
\\\indent\indent
This grammar is ambiguous.  Consider the derivations for the\\
\indent\indent
following string: \textit{a b a b}\\
\\\indent\indent
\begin{tabular}{c c l}
\textit{S}	&	$\Rightarrow$	&	\textit{a S b S}\\
			&	$\Rightarrow$	&	\textit{a b S a S b S}\\
			&	$\Rightarrow$	&	\textit{a b a S b S}\\
			&	$\Rightarrow$	&	\textit{a b a b S}\\
			&	$\Rightarrow$	&	\textit{a b a b}\\
\end{tabular}\\
\indent\indent
and\\
\\\indent\indent
\begin{tabular}{c c l}
\textit{S}	&	$\Rightarrow$	&	\textit{a S b S}\\
			&	$\Rightarrow$	&	\textit{a b S}\\
			&	$\Rightarrow$	&	\textit{a b a S b S}\\
			&	$\Rightarrow$	&	\textit{a b a b S}\\
			&	$\Rightarrow$	&	\textit{a b a b}\\
\end{tabular}\\
\\\indent
Description:\\
\\\indent\indent
This grammar generates the language which contains all\\
\indent\indent
the strings of equal amounts of a's and b's, regardless of\\
\indent\indent
order.\\
\newpage

% 4.2.2.g
\\\indent \textbf{g.}\\

\\\indent
Leftmost Derivation:\\
\\\indent\indent
\begin{tabular}{c c l}
\textit{bexpr}	&	$\Rightarrow$	&	\textit{bterm}\\
				&	$\Rightarrow$	&	\textit{bfactor}\\
				&	$\Rightarrow$	&	\textbf{not} \textit{bfactor}\\
				&	$\Rightarrow$	&	\textbf{not} ( \textit{bexpr} )\\
				&	$\Rightarrow$	&	\textbf{not} ( \textit{bexpr} \textbf{or} \textit{bterm} )\\
				&	$\Rightarrow$	&	\textbf{not} ( \textit{bterm} \textbf{or} \textit{bterm} )\\
				&	$\Rightarrow$	&	\textbf{not} ( \textit{bfactor} \textbf{or} \textit{bterm} )\\
				&	$\Rightarrow$	&	\textbf{not} ( \textbf{true or} \textit{bterm} )\\
				&	$\Rightarrow$	&	\textbf{not} ( \textbf{true or} \textit{bfactor} )\\
				&	$\Rightarrow$	&	\textbf{not} ( \textbf{true of false} )\\
\end{tabular}\\
\\\indent
Rightmost Derivation:\\
\\\indent\indent
\begin{tabular}{c c l}
\textit{bexpr}	&	$\Rightarrow$	&	\textit{bterm}\\
				&	$\Rightarrow$	&	\textit{bfactor}\\
				&	$\Rightarrow$	&	\textbf{not} \textit{bfactor}\\
				&	$\Rightarrow$	&	\textbf{not} ( \textit{bexpr} )\\
				&	$\Rightarrow$	&	\textbf{not} ( \textit{bexpr} \textbf{or} \textit{bterm} )\\
				&	$\Rightarrow$	&	\textbf{not} ( \textit{bexpr} \textbf{or} \textit{bfactor} )\\
				&	$\Rightarrow$	&	\textbf{not} ( \textit{bexpr} \textbf{or false} )\\
				&	$\Rightarrow$	&	\textbf{not} ( \textit{bterm} \textbf{or false} )\\
				&	$\Rightarrow$	&	\textbf{not} ( \textit{bfactor} \textbf{or false} )\\
				&	$\Rightarrow$	&	\textbf{not} ( \textbf{true of false} )\\
\end{tabular}\\

\\\indent
Parse Tree:\\
\includegraphics[scale=0.5]{4_2_2_g1.png}\\
\\\indent
Ambiguity:\\
\\\indent\indent
This grammar appears to be unambiguous because each nonterminal\\
\indent\indent
only has a single production that contains left recursion, and that\\
\indent\indent
production also contains terminals.  Additionally, all of the productions\\
\indent\indent
contain other nonterminals, or terminals.\\
\\\indent
Description:\\
\\\indent\indent
This grammar generates the language which contains all strings of\\
\indent\indent
boolean expressions using the terminals: \textbf{not, or, and, true, false}.\\
\indent\indent
This includes nested boolean expressions.\\

% Problem 4.3.3
\newpage
\noindent \textbf{4.3.3}\\
\\
\indent
String:\\
\indent
\textbf{if} \textit{expr} \textbf{then if} \textit{expr} \textbf{then other else if}
\textit{expr} \textbf{then other else other}\\

\\\indent
Parse Tree 1:\\
\indent
\includegraphics[scale=0.35]{4_3_3_1.png}\\
\\\indent
Parse Tree 2:\\
\includegraphics[scale=0.35]{4_3_3_2.png}\\



% Problem 4.4.1
\newpage
\noindent \textbf{4.4.1}\\
\\
\indent
Grammar after elimination of left recursion:\\
\\\indent\indent\begin{tabular}{c c l}
\textit{S}			&	$\rightarrow$	&	( \textit{L} )\\
					&	$\vert$			&	\textit{a}\\
\textit{L}			&	$\rightarrow$	&	\textit{S L$'$}\\
\textit{L$'$}		&	$\rightarrow$	&	, \textit{S L$'$}\\
					&	$\vert$			&	$\epsilon$\\
\end{tabular}\\
\\\indent
\textsc{First:}\\
\\\indent\indent
\begin{tabular}{c c l}
\textsc{First}(\textit{S})		&	$\rightarrow$	&	\{ ( , \textit{a} \}\\
\textsc{First}(\textit{L})		&	$\rightarrow$	&	\{ ( , \textit{a} \}\\
\textsc{First}(\textit{L$'$})	&	$\rightarrow$	&	\{ , , $\epsilon$ \}\\
\end{tabular}\\

\\\indent
\textsc{Follow:}\\
\\\indent\indent
\begin{tabular}{c c l}
\textsc{Follow}(\textit{S})		&	$\rightarrow$	&	\{ \$ , , \}\\
\textsc{Follow}(\textit{L})		&	$\rightarrow$	&	\{ ) \}\\
\textsc{Follow}(\textit{L$'$})	&	$\rightarrow$	&	\{ $\epsilon$ , ) \}\\
\end{tabular}\\
\\\indent
Parsing Table:\\
\\\indent\indent\begin{tabular}{c | c | c | c | c | c}
\textsc{Non-terminal}	&	a											&	(											&	)	&	,	&	\$	\\ \hline
\textit{S}				&	\textit{S} $\rightarrow$ a					&	\textit{S} $\rightarrow$ ( \textit{L} )		&		&		&		\\
\textit{L}				&	\textit{L} $\rightarrow$ \textit{S L$'$}	&	\textit{L} $\rightarrow$ \textit{S L$'$}	&		&		&		\\
\textit{L$'$}			&												&												& 	\textit{L$'$} $\rightarrow$ $\epsilon$	&	\textit{L$'$} $\rightarrow$ , \textit{S L$'$}	&	\textit{L$'$} $\rightarrow$ $\epsilon$	\\			
\end{tabular}\\

\\\indent
\\Parse moves on string: (a,a)\\
\\\indent\indent
\begin{tabular}{l r r l}
\hline
\hline
\textsc{Matched}	&	\textsc{Stack}				&	\textsc{Input}	&	\textsc{Action}											\\	\hline
					&	\textit{S}\$				&	(a,a)\$			&															\\
					&	(\textit{L})\$				&	(a,a)\$			&	output \textit{S} $\rightarrow$ (\textit{L})			\\
(					&	\textit{L})\$				&	a,a)\$			&	match (													\\
(					&	\textit{SL$'$})\$			&	a,a)\$			&	output \textit{L} $\rightarrow$ \textit{SL$'$}			\\
(					&	a\textit{L$'$})\$			&	a,a)\$			&	output \textit{S} $\rightarrow$ a						\\
(a					&	\textit{L$'$})\$			&	,a)\$			&	match a													\\
(a					&	,\textit{SL$'$})\$			&	,a)\$			&	output \textit{L$'$} $\rightarrow$ ,\textit{SL$'$}		\\
(a,					&	\textit{SL$'$})\$			&	a)\$			&	match ,													\\
(a,					&	a\textit{L$'$})\$			&	a)\$			&	output \textit{S} $\rightarrow$ a						\\
(a,a				&	\textit{L$'$})\$			&	)\$				&	match a													\\
(a,a				&	)\$							&	)\$				&	output \textit{L$'$} $\rightarrow$ $\epsilon$			\\
(a,a)				&	\$							&	\$				&	match )													\\	\hline						
\end{tabular}\\

\newpage
\indent
Parse moves on string: (a,(a,a))\\
\\\indent\indent
\begin{tabular}{l r r l}
\hline
\hline
\textsc{Matched}	&	\textsc{Stack}						&	\textsc{Input}	&	\textsc{Action}									\\	\hline
					&	\textit{S}\$						&	(a,(a,a))\$		&													\\
					&	(\textit{L})\$						&	(a,(a,a))\$		&	output \textit{S} $\rightarrow$ (\textit{L})	\\
(					&	\textit{L})\$						&	a,(a,a))\$		&	match (											\\
(					&	\textit{SL$'$})\$					&	a,(a,a))\$		&	output \textit{L} $\rightarrow$ \textit{SL$'$}	\\
(					&	a\textit{L$'$})\$					&	a,(a,a))\$		&	output \textit{S} $\rightarrow$ a				\\
(a					&	\textit{L$'$})\$					&	,(a,a))\$		&	match a											\\
(a					&	,\textit{SL$'$})\$					&	,(a,a))\$		&	\textit{L$'$} $\rightarrow$ ,\textit{SL$'$}		\\
(a,					&	\textit{SL$'$})\$					&	(a,a))\$		&	match ,											\\
(a,					&	(\textit{L})\textit{L$'$})\$		&	(a,a))\$		&	\textit{S} $\rightarrow$ (\textit{L})			\\
(a,(				&	\textit{L})\textit{L$'$})\$			&	a,a))\$			&	match (											\\
(a,(				&	\textit{SL$'$})\textit{L$'$})\$		&	a,a))\$			&	\textit{L} $\rightarrow$ \textit{SL$'$}			\\
(a,(				&	a\textit{L$'$})\textit{L$'$})\$		&	a,a))\$			&	\textit{S} $\rightarrow$ a						\\
(a,(a				&	\textit{L$'$})\textit{L$'$})\$		&	,a))\$			&	match a											\\
(a,(a				&	,\textit{SL$'$})\textit{L$'$})\$	&	,a))\$			&	\textit{L$'$} $\rightarrow$ \textit{SL$'$}		\\
(a,(a,				&	\textit{SL$'$})\textit{L$'$})\$		&	a))\$			&	match ,											\\
(a,(a,				&	a\textit{L$'$})\textit{L$'$})\$		&	a))\$			&	\textit{S} $\rightarrow$ a						\\
(a,(a,a				&	\textit{L$'$})\textit{L$'$})\$		&	))\$			&	match a											\\
(a,(a,a				&	)\textit{L$'$})\$					&	))\$			&	\textit{L$'$} $\rightarrow$ $\epsilon$			\\
(a,(a,a)			&	\textit{L$'$})\$					&	)\$				&	match )											\\
(a,(a,a)			&	)\$									&	)\$				&	\textit{L$'$} $\rightarrow$ $\epsilon$			\\
(a,(a,a))			&	\$									&	\$				&	match )											\\	\hline
\end{tabular}\\

\newpage
\indent
Parse moves on string: (a,((a,a),(a,a)))\\
\\\indent\indent
\begin{tabular}{l r r l}
\hline
\hline
\textsc{Matched}	&	\textsc{Stack}	&	\textsc{Input}	&	\textsc{Action}\\ \hline
\end{tabular}\\





% Problem 4.4.3
\newpage
\noindent \textbf{4.4.3}\\
\\

% Problem 4.4.4
\newpage
\noindent \textbf{4.4.4}\\
\\

% Problem 4.6.2
\newpage
\noindent \textbf{4.6.2}\\
\\

% Problem 4.6.3
\newpage
\noindent \textbf{4.6.3}\\
\\

% Problem 4.6.4
\newpage
\noindent \textbf{4.6.4}\\
\\

% End Document
\end{document}
