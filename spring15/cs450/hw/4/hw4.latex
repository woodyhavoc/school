% Document class
\documentclass{article}

% Packages
\usepackage[english]{babel}
\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{fancyhdr}
\usepackage{graphicx}
\usepackage{latexsym}
\usepackage{mathtools}

% Graphics Path
\graphicspath{ '{images/} }

% Page Styles
\pagestyle{fancy}

% Custom Commands
\newcommand{\ul}{\underline}

% Header Info
\fancyhf{}
\lhead{CS450}
\chead{HW4}
\rhead{Aaron Woods}
\rfoot{Page \thepage}

% Begin Document
\begin{document}

% Problem 4.2.2
\noindent \textbf{4.2.2}\\

\\\indent \textbf{a.}\\

\\\indent 
Leftmost Derivation:
\\\indent\indent
\textit{S} $\Rightarrow$ 0 \textit{S} 1
$\Rightarrow$ 0 0 \textit{S} 1 1
$\Rightarrow$ 0 0 0 1 1 1\\
\\\indent
Rightmost Derivation:
\\\indent\indent
Same as Leftmost Derivation.
\\
\\\indent
Parse Tree:
\\\indent\indent
\includegraphics[scale=0.5]{4_2_2_a1.png}\\

\\\indent
Ambiguity:
\\\indent\indent
This grammar is unambiguous.  Since the non-terminal is located
\\\indent\indent
in the middle of the production, there is only one location for recursion.\\

\\\indent
Description:
\\\indent\indent
This grammar generates the language which contains all strings of
\\\indent\indent
one or more 0s follow by the same number of 1s.\\

\newpage
\\\indent \textbf{b.}\\


\\\indent 
Leftmost Derivation:
\\\indent\indent
\textit{S}
$\Rightarrow$ + \textit{S S}
$\Rightarrow$ + * \textit{S S S}
$\Rightarrow$ + * \textit{a S S}
$\Rightarrow$ + * \textit{a a S}
$\Rightarrow$ + * \textit{a a a}\\
\\\indent
Rightmost Derivation:
\\\indent\indent
\textit{S}
$\Rightarrow$ + \textit{S S}
$\Rightarrow$ + \textit{S a}
$\Rightarrow$ + * \textit{S S a}
$\Rightarrow$ + * \textit{S a a}
$\Rightarrow$ + * \textit{a a a}\\
\\
\\\indent
Parse Tree:
\\\indent\indent
\includegraphics[scale=0.5]{4_2_2_b1.png}\\

\\\indent
Ambiguity:
\\\indent\indent
This grammar is unambiguous.  The arithmetic operations control the
\\\indent\indent
growth of the tree, and only allow for a single parse tree for a given
\\\indent\indent
string.\\

\\\indent
Description:
\\\indent\indent
This grammar generates the language which contains all strings
\\\indent\indent
which use prefix notation for addition and multiplication on two
\\\indent\indent
or more values, represented by \textit{a}.\\

\newpage
\\\indent \textbf{c.}\\

\\\indent
Leftmost Derivation:

\\\indent\indent
\begin{tabular}{c  c  l}
\textit{S} 	&	$\Rightarrow$	&	\textit{S} ( \textit{S} ) \textit{S}\\
			&	$\Rightarrow$	&	( \textit{S} ) \textit{S}\\
			&	$\Rightarrow$	&	( \textit{S} ( \textit{S} ) \textit{S} ) \textit{S}\\
			&	$\Rightarrow$	&	( \textit{S} ( \textit{S} ) \textit{S} ( \textit{S} ) \textit{S} ) \textit{S}\\
			&	$\Rightarrow$	&	( ( \textit{S} ) \textit{S} ( \textit{S} ) \textit{S} ) \textit{S}\\
			&	$\Rightarrow$	&	( ( ) \textit{S} ( \textit{S} ) \textit{S} ) \textit{S}\\
			&	$\Rightarrow$	&	( ( ) ( \textit{S} ) \textit{S} ) \textit{S}\\
			&	$\Rightarrow$	&	( ( ) ( ) \textit{S} ) \textit{S}\\
			&	$\Rightarrow$	&	( ( ) ( ) ) \textit{S}\\
			&	$\Rightarrow$	&	( ( ) ( ) )\\
\end{tabular}\\

\\\indent
Rightmost Derivation:

\\\indent\indent
\begin{tabular}{c c l}
\textit{S}	&	$\Rightarrow$	&	\textit{S} ( \textit{S} ) \textit{S}\\
			&	$\Rightarrow$	&	\textit{S} ( \textit{S} )\\
			&	$\Rightarrow$	&	\textit{S} ( \textit{S} ( \textit{S} ) \textit{S} )\\
			&	$\Rightarrow$	&	\textit{S} ( \textit{S} ( \textit{S} ) \textit{S} ( \textit{S} ) \textit{S} )\\
			&	$\Rightarrow$	&	\textit{S} ( \textit{S} ( \textit{S} ) \textit{S} ( \textit{S} ) )\\
			&	$\Rightarrow$	&	\textit{S} ( \textit{S} ( \textit{S} ) \textit{S} ( ) )\\
			&	$\Rightarrow$	&	\textit{S} ( \textit{S} ( \textit{S} ) ( ) )\\
			&	$\Rightarrow$	&	\textit{S} ( \textit{S} ( ) ( ) )\\
			&	$\Rightarrow$	&	\textit{S} ( ( ) ( ) )\\
			&	$\Rightarrow$	&	( ( ) ( ) )\\


\end{tabular}\\

\\\indent
Parse Tree:
\\\indent\indent
\includegraphics[scale=0.5]{4_2_2_c1.png}\\

\\\indent
Ambiguity:
\\\indent\indent
This grammar is ambiguous, as can be seen by this alternate 
\\\indent\indent
leftmost derivation:\\

\\\indent\indent
\begin{tabular}{c  c  l}
\textit{S} 	&	$\Rightarrow$	&	\textit{S} ( \textit{S} ) \textit{S}\\
			&	$\Rightarrow$	&	( \textit{S} ) \textit{S}\\
			&	$\Rightarrow$	&	( \textit{S} ( \textit{S} ) \textit{S} ) \textit{S}\\
			&	$\Rightarrow$	&	( ( \textit{S} ) \textit{S} ) \textit{S}\\
			&	$\Rightarrow$	&	( ( ) \textit{S} ) \textit{S}\\
			&	$\Rightarrow$	&	( ( ) \textit{S} ( \textit{S} ) \textit{S} ) \textit{S}\\
			&	$\Rightarrow$	&	( ( ) ( \textit{S} ) \textit{S} ) \textit{S}\\
			&	$\Rightarrow$	&	( ( ) ( ) \textit{S} ) \textit{S}\\
			&	$\Rightarrow$	&	( ( ) ( ) ) \textit{S}\\
			&	$\Rightarrow$	&	( ( ) ( ) )\\
\end{tabular}\\

\\\indent
Description:

\\\indent\indent
This grammar generates the language which contains all strings
\\\indent\indent
of matching open and closed parentheses.

\newpage
\\\indent \textbf{d.}\\

\\\indent
Leftmost Derivation:

\\\indent\indent
\begin{tabular}{c c l}
\textit{S}	&	$\Rightarrow$	&	\textit{S S}\\
			&	$\Rightarrow$	&	\textit{S} * \textit{S}\\
			&	$\Rightarrow$	&	( \textit{S} ) * \textit{S}\\
			&	$\Rightarrow$	&	( \textit{S} + \textit{S} ) * \textit{S}\\
			&	$\Rightarrow$	&	( \textit{a} + \textit{S} ) * \textit{S}\\
			&	$\Rightarrow$	&	( \textit{a} + \textit{a} ) * \textit{S}\\
			&	$\Rightarrow$	&	( \textit{a} + \textit{a} ) * \textit{a}\\
\end{tabular}\\

\\\indent
Rightmost Derivation:

\\\indent\indent
\begin{tabular}{c c l}
\textit{S}	&	$\Rightarrow$	&	\textit{S S}\\
			&	$\Rightarrow$	&	\textit{S a}\\
			&	$\Rightarrow$	&	\textit{S} * \textit{a}\\
			&	$\Rightarrow$	&	( \textit{S} ) * \textit{a}\\
			&	$\Rightarrow$	&	( \textit{S} + \textit{S} ) * \textit{a}\\
			&	$\Rightarrow$	&	( \textit{S} + \textit{a} ) * \textit{a}\\
			&	$\Rightarrow$	&	( \textit{a} + \textit{a} ) * \textit{a}\\
\end{tabular}\\

\\\indent
Parse Tree:

\\\indent\indent
\includegraphics[scale=0.5]{4_2_2_d1.png}\\

\\\indent
Ambiguity:

\\\indent\indent
Based on the terminals that are associated with most of the
\\\indent\indent
productions, it appears that this grammar only allows a single
\\\indent\indent
parse tree to exist for any given string.  Therefore, it is
\\\indent\indent
unambiguous.\\

\\\indent
Description:

\\\indent\indent
This grammar generates the language which contains all strings
\\\indent\indent
of two values either added or multiplied, with or without 
\\\indent\indent
parentheses.

\newpage
\\\indent \textbf{e.}\\

\newpage
\\\indent \textbf{f.}\\

\newpage
\\\indent \textbf{g.}\\

% Problem 4.3.3
\newpage
\noindent \textbf{4.3.3}\\
\\

% Problem 4.4.1
\newpage
\noindent \textbf{4.4.1}\\
\\

% Problem 4.4.3
\newpage
\noindent \textbf{4.4.3}\\
\\

% Problem 4.4.4
\newpage
\noindent \textbf{4.4.4}\\
\\

% Problem 4.6.2
\newpage
\noindent \textbf{4.6.2}\\
\\

% Problem 4.6.3
\newpage
\noindent \textbf{4.6.3}\\
\\

% Problem 4.6.4
\newpage
\noindent \textbf{4.6.4}\\
\\

% End Document
\end{document}
